任何数量的实体路径和剪切路径都可以被添加到一个AddPath()方法中去，或者通过AddPaths()来实现添加到一个组中去，或者两者混用；

　　实体路径可以是开线段集或者是闭合线段，但是裁剪线段必须是闭合的；

　　在闭合的路径中，*方向问题*应当结合filling rule来进行考虑，并且是通过Clipper库当中的Execute()方法来传递的；

　　路径的坐标范围：类似前中文的IntPoint范围；

　　返回值内容：如果输入的路径不正确，该函数会返回false；在以下情况路径会被视为不正确：

　　　　该路径少于两个点；

　　　　有两个点但是不是一个开放路径；

　　　　点集全部是共线的但是不是一个开放路径；




一旦裁剪路径组和被裁剪路径组已经被设定（通过AddPath或者AddPaths方法）,Execute方法可以执行布尔运算，具体运算类型由clipType来指定； 
最终的solution参数可以是一个路径组（Path）或者一个多边形树（PolyTree）类型。
因为路径组结构比多边形树结构简单，所以效率相对较高（大约10%）；
但是，PolyTree的信息结构可能提供给了用户更多的有用信息。
首先，PolyTree结构保留了网状的多边形父子关系（例如外轮廓包含孔洞、孔洞包含内轮廓等）。
相同的，只有PolyTree类型可以区别开轮廓和闭合轮廓，因为每一个PolyNode结构有IsOpen的属性（Path类型没有任何成员来告知它是否为开放的或者是闭合的）。
正因为如此，当一个开放轮廓组被传递给一个Clipper对象，使用者必须使用一个PolyTree类型来接收solution的结果，否则会引起错误； 
当在使用开放式路径进行裁剪时，Clipper库提供了两个有效的函数来快速的分离结果当中的开放路径部分和闭合轮廓组部分OpenPathsFromPolyTree和CLosedPathsFromPolyTree。同时Clipper也提供了PolyTreeToPaths来快速将PolyTree类型转换为Paths。




