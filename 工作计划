2022.2.10
  1.研究Qlineedit添加clicked事件
  def eventFilter(self, widget, event):
        if widget == self.num_forming_cylinder_distance:
            if event.type() == QEvent.FocusOut:
                pass
            elif event.type() == QEvent.FocusIn:
                self.clicked.emit()   #当焦点再次落到edit输入框时，发送clicked信号出去
        else:
            pass
        return False
        注意事件完成之后需要使用  clearFocus（）来取消掉焦点事件，不然会无限循环执行clicked绑定的事件
        
  2.华成机器排气之后，气路全部关掉，原因是485通讯太慢，气压检测值过高，关闭了所有的气路。
2022.2.11
  1.全局键盘设置
2022.2.12
  全局键盘设置前三项完成
  双激光探讨
2022.2.13
  放假
2022.2.14
  优化代码冗余
  pyqt5的信号与槽机制深入，研究如何给槽函数传递自定义参数
        # -*- coding: utf-8 -*-
      """
          【简介】
           部件中的信号槽传递，使用partial函数传参数示例
      """
      from PyQt5.QtWidgets import QMainWindow, QPushButton, QWidget, QMessageBox, QApplication, QHBoxLayout
      import sys
      from functools import partial

      class WinForm(QMainWindow):
          def __init__(self, parent=None):
              super(WinForm, self).__init__(parent)
              self.setWindowTitle("信号和槽传递额外参数例子")
              button1 = QPushButton('Button 1')
              button2 = QPushButton('Button 2')

              button1.clicked.connect(partial(self.onButtonClick, 1))
              button2.clicked.connect(partial(self.onButtonClick, 2))

              layout = QHBoxLayout()
              layout.addWidget(button1)
              layout.addWidget(button2)

              main_frame = QWidget()
              main_frame.setLayout(layout)
              self.setCentralWidget(main_frame)

          def onButtonClick(self, n):
              print('Button {0} 被按下了'.format(n))
              QMessageBox.information(self, "信息提示框", 'Button {0} clicked'.format(n))


      if __name__ == "__main__":
          app = QApplication(sys.argv)
          form = WinForm()
          form.show()
          sys.exit(app.exec_())

2022.2.15
  更新时需要把密码改成全数字
  成形缸和料缸行程
  光标问题设置readonly
  
2022.2.16
   研究关于qss的界面美化（和css很相似，属性：数值）
   font-family：设置字体
text-align：设置文本文字对齐方式
background:设置控件背景色
border:设置边界，none为无边界
font-size：字体大小
border-radius:设置四边圆角
hover：伪状态，设置鼠标悬浮在控件上方时变化

  更改了字体为微软素黑
  更改了输出框的形状
2022.2.17
    研究如何添加背景图片
    子窗口退出后无法取消子窗口内的进程
    取消了样式内的font的设定，因为会导致字体大小为-1
2022.2.18
    子窗口关闭后，无法再操作子窗口开启的子进程
    具体解决方法为，将变量存放在外部，在使用的时候读取。
2022.2.21
    platform模块，提供了很多方法去获取操作系统的信息，
    其中platform.system  可以获取操作系统的类型。
    
    python的opengl模块，pyopengl学习
    OpenGL 是 Open Graphics Library 的简写，意为“开放式图形库”，是用于渲染 2D、3D 矢量图形的跨语言、跨平台的应用程序编程接口（API）。OpenGL 不是一个独立的平台，因此，它需要借助于一种编程语言才能被使用。C / C++ / python / java 都可以很好支持 OpengGL
    
    核心库包含有115个函数，函数名的前缀为gl。这部分函数用于常规的、核心的图形处理。此函数由gl.dll来负责解释执行。由于许多函数可以接收不同数以下几类。据类型的参数，因此派生出来的函数原形多达300多个。核心库中的函数主要可以分为以下几类函数：

绘制基本几何图元的函数：
glBegain()、glEnd()、glNormal*()、glVertex*()

矩阵操作、几何变换和投影变换的函数：
如矩阵入栈函数glPushMatrix()，矩阵出栈函数glPopMatrix()，装载矩阵函数glLoadMatrix()，矩阵相乘函数glMultMatrix()，当前矩阵函数glMatrixMode()和矩阵标准化函数glLoadIdentity()，几何变换函数glTranslate*()、glRotate*()和glScale*()，投影变换函数glOrtho()、glFrustum()和视口变换函数glViewport()

颜色、光照和材质的函数：
如设置颜色模式函数glColor*()、glIndex*()，设置光照效果的函数glLight*() 、glLightModel*()和设置材质效果函数glMaterial()

显示列表函数：
主要有创建、结束、生成、删除和调用显示列表的函数glNewList()、glEndList()、glGenLists()、glCallList()和glDeleteLists()

纹理映射函数：
主要有一维纹理函数glTexImage1D()、二维纹理函数glTexImage2D()、设置纹理参数、纹理环境和纹理坐标的函数glTexParameter*()、glTexEnv*()和glTetCoord*()

特殊效果函数：
融合函数glBlendFunc()、反走样函数glHint()和雾化效果glFog*()

光栅化、象素操作函数：
如象素位置glRasterPos*()、线型宽度glLineWidth()、多边形绘制模式glPolygonMode()，读取象素glReadPixel()、复制象素glCopyPixel()

选择与反馈函数：
主要有渲染模式glRenderMode()、选择缓冲区glSelectBuffer()和反馈缓冲区glFeedbackBuffer()

曲线与曲面的绘制函数：
生成曲线或曲面的函数glMap*()、glMapGrid*()，求值器的函数glEvalCoord*() glEvalMesh*()

状态设置与查询函数：
glGet*()、glEnable()、glGetError()
顶点（vertex）是 OpengGL 中非常重要的概念，描述线段、多边形都离不开顶点。和设置颜色类似，设置顶点的函数也有几十个，都是以 glVertex 开头，后面跟着参数个数和参数类型，同样也支持将多个以向量方式传递。
两个参数的话，分别表示 xy 坐标，三个参数则分别表示 xyz 坐标。如有第四个参数，则表示该点的齐次坐标 w；否则，默认 w=1

2022.2.22
    64位pyopengl 3.1.6测试
    AI软件包下载
    opengl学习
    numpy学习
2022.2.23
    华成软件2.0更新
    1.删除了一键打印
    2.更新了计算时间的算法
    3.
    
    
    
    

