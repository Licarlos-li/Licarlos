2022.2.10
  1.研究Qlineedit添加clicked事件
  def eventFilter(self, widget, event):
        if widget == self.num_forming_cylinder_distance:
            if event.type() == QEvent.FocusOut:
                pass
            elif event.type() == QEvent.FocusIn:
                self.clicked.emit()   #当焦点再次落到edit输入框时，发送clicked信号出去
        else:
            pass
        return False
        注意事件完成之后需要使用  clearFocus（）来取消掉焦点事件，不然会无限循环执行clicked绑定的事件
        
  2.华成机器排气之后，气路全部关掉，原因是485通讯太慢，气压检测值过高，关闭了所有的气路。
2022.2.11
  1.全局键盘设置
2022.2.12
  全局键盘设置前三项完成
  双激光探讨
2022.2.13
  放假
2022.2.14
  优化代码冗余
  pyqt5的信号与槽机制深入，研究如何给槽函数传递自定义参数
        # -*- coding: utf-8 -*-
      """
          【简介】
           部件中的信号槽传递，使用partial函数传参数示例
      """
      from PyQt5.QtWidgets import QMainWindow, QPushButton, QWidget, QMessageBox, QApplication, QHBoxLayout
      import sys
      from functools import partial

      class WinForm(QMainWindow):
          def __init__(self, parent=None):
              super(WinForm, self).__init__(parent)
              self.setWindowTitle("信号和槽传递额外参数例子")
              button1 = QPushButton('Button 1')
              button2 = QPushButton('Button 2')

              button1.clicked.connect(partial(self.onButtonClick, 1))
              button2.clicked.connect(partial(self.onButtonClick, 2))

              layout = QHBoxLayout()
              layout.addWidget(button1)
              layout.addWidget(button2)

              main_frame = QWidget()
              main_frame.setLayout(layout)
              self.setCentralWidget(main_frame)

          def onButtonClick(self, n):
              print('Button {0} 被按下了'.format(n))
              QMessageBox.information(self, "信息提示框", 'Button {0} clicked'.format(n))


      if __name__ == "__main__":
          app = QApplication(sys.argv)
          form = WinForm()
          form.show()
          sys.exit(app.exec_())
